{"version":3,"sources":["components/Graph.tsx","utils/graphUtils.ts","components/ProjectPanel.tsx","App.tsx","index.tsx"],"names":["Graph","_ref","projects","onTagClick","svgRef","useRef","useEffect","_simulation$force","svg","d3","current","graphData","tagCount","links","forEach","project","tags","tag","nodes","Object","keys","map","id","label","size","tagMap","otherTag","includes","push","connectedTags","entries","targetTag","source","target","generateGraphData","selectAll","remove","attr","simulation","force","d","distance","strength","width","height","link","append","data","enter","node","Math","sqrt","projectCount","on","event","x","y","_jsx","ref","ProjectPanel","selectedTag","filteredProjects","filter","_jsxs","className","children","length","title","description","href","rel","App","setSelectedTag","useState","setProjects","projectsData","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.a3236482.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { generateGraphData } from '../utils/graphUtils';\nimport { Project } from '../data/projects.json';\n\ninterface GraphProps {\n  projects: Project[];\n  onTagClick: (tag: string) => void;\n}\n\nconst Graph: React.FC<GraphProps> = ({ projects, onTagClick }) => {\n  const svgRef = useRef<SVGSVGElement | null>(null);\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    const graphData = generateGraphData(projects);\n\n    // Clear previous graph\n    svg.selectAll('*').remove();\n\n    // Set up SVG dimensions\n    const width = 800;\n    const height = 600;\n    svg.attr('width', width).attr('height', height);\n\n    // Create simulation\n    const simulation = d3\n      .forceSimulation(graphData.nodes)\n      .force('link', d3.forceLink().id((d: any) => d.id).distance(100))\n      .force('charge', d3.forceManyBody().strength(-300))\n      .force('center', d3.forceCenter(width / 2, height / 2));\n\n    // Create links\n    const link = svg\n      .append('g')\n      .selectAll('line')\n      .data(graphData.links)\n      .enter()\n      .append('line')\n      .attr('stroke', '#999')\n      .attr('stroke-opacity', 0.6);\n\n    // Create nodes\n    const node = svg\n      .append('g')\n      .selectAll('circle')\n      .data(graphData.nodes)\n      .enter()\n      .append('circle')\n      .attr('r', (d: any) => Math.sqrt(d.projectCount) * 5)\n      .attr('fill', '#69b3a2')\n      .attr('stroke', '#fff')\n      .attr('stroke-width', 1.5)\n      .on('click', (event, d) => onTagClick(d.tag));\n\n    // Update simulation on tick\n    simulation\n      .nodes(graphData.nodes)\n      .on('tick', () => {\n        link\n          .attr('x1', (d: any) => d.source.x)\n          .attr('y1', (d: any) => d.source.y)\n          .attr('x2', (d: any) => d.target.x)\n          .attr('y2', (d: any) => d.target.y);\n\n        node.attr('cx', (d: any) => d.x).attr('cy', (d: any) => d.y);\n      });\n\n    simulation.force('link')?.links(graphData.links);\n  }, [projects, onTagClick]);\n\n  return <svg ref={svgRef}></svg>;\n};\n\nexport default Graph;","// This file contains utility functions for graph visualization, converting project and tag data into a suitable format for rendering nodes and links.\n\nexport interface TagNode {\n    id: string;\n    label: string;\n    size: number;\n}\n\nexport interface Link {\n    source: string;\n    target: string;\n}\n\n// Converts project data into nodes and links for the graph\nexport function generateGraphData(projects: any[]): { nodes: TagNode[]; links: Link[] } {\n    const tagCount: { [key: string]: number } = {};\n    const links: Link[] = [];\n\n    // Count occurrences of each tag\n    projects.forEach(project => {\n        project.tags.forEach(tag => {\n            tagCount[tag] = (tagCount[tag] || 0) + 1;\n        });\n    });\n\n    // Create nodes from tags\n    const nodes: TagNode[] = Object.keys(tagCount).map(tag => ({\n        id: tag,\n        label: tag,\n        size: tagCount[tag],\n    }));\n\n    // Create links based on co-occurring tags in projects\n    const tagMap: { [key: string]: string[] } = {};\n    projects.forEach(project => {\n        project.tags.forEach(tag => {\n            if (!tagMap[tag]) {\n                tagMap[tag] = [];\n            }\n            project.tags.forEach(otherTag => {\n                if (tag !== otherTag && !tagMap[tag].includes(otherTag)) {\n                    tagMap[tag].push(otherTag);\n                }\n            });\n        });\n    });\n\n    for (const [tag, connectedTags] of Object.entries(tagMap)) {\n        connectedTags.forEach(targetTag => {\n            links.push({ source: tag, target: targetTag });\n        });\n    }\n\n    return { nodes, links };\n}","import React from 'react';\n\ninterface Project {\n  id: string;\n  title: string;\n  description: string;\n  tags: string[];\n  link: string;\n}\n\ninterface ProjectPanelProps {\n  selectedTag: string | null;\n  projects: Project[];\n}\n\nconst ProjectPanel: React.FC<ProjectPanelProps> = ({ selectedTag, projects }) => {\n  const filteredProjects = selectedTag\n    ? projects.filter(project => project.tags.includes(selectedTag))\n    : projects;\n\n  return (\n    <div className=\"project-panel\">\n      <h2>Projects</h2>\n      {filteredProjects.length > 0 ? (\n        <ul>\n          {filteredProjects.map(project => (\n            <li key={project.id}>\n              <h3>{project.title}</h3>\n              <p>{project.description}</p>\n              <a href={project.link} target=\"_blank\" rel=\"noopener noreferrer\">View Project</a>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No projects found for this tag.</p>\n      )}\n    </div>\n  );\n};\n\nexport default ProjectPanel;","import React, { useState, useEffect } from 'react';\nimport Graph from './components/Graph';\nimport ProjectPanel from './components/ProjectPanel';\nimport projectsData from './data/projects.json';\nimport { convertDataToGraph } from './utils/graphUtils';\n\nconst App: React.FC = () => {\n  const [selectedTag, setSelectedTag] = useState<string | null>(null);\n  const [projects, setProjects] = useState(projectsData);\n\n  const handleTagClick = (tag: string) => {\n    setSelectedTag(tag);\n  };\n\n  useEffect(() => {\n    if (selectedTag) {\n      const filteredProjects = projectsData.filter(project =>\n        project.tags.includes(selectedTag)\n      );\n      setProjects(filteredProjects);\n    } else {\n      setProjects(projectsData);\n    }\n  }, [selectedTag]);\n\n  return (\n    <div className=\"app\">\n      <Graph onTagClick={handleTagClick} />\n      <ProjectPanel projects={projects} />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}